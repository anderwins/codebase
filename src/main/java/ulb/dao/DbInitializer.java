package ulb.dao;

import ulb.Config;
import ulb.controller.handleError.DatabaseInitializationException;

import java.io.File;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Logger;


/**
 * Classe responsable de l'initialisation de la base de donn√©es.
 * Elle v√©rifie si la base et les tables existent, sinon elle cr√©e tout.
 */
public class DbInitializer {

    private final String DbPath = String.valueOf(Config.getFullPathFromRelative(Config.DATABASE_PATH));
    private final SQLLoader createSqlLoader = new SQLLoader(Config.CREATE_TABLES_SQL_FILE); // Chargeur SQL pour les requ√™tes de creation des tables 
    private final Connection conn;
    public static final Logger logger = Logger.getLogger(DbInitializer.class.getName());

    /**
     * Initialise la base de donn√©es et cr√©e les tables si elles n'existent pas.
     */
    public DbInitializer() throws DatabaseInitializationException {
        try {
            Class.forName("org.sqlite.JDBC"); // for some obscure reason, explicit loading is needed in jar files
        }catch(ClassNotFoundException e){
            logger.severe("Pilote JDBC SQLite non trouv√© : " + e.getMessage());
            throw new RuntimeException("Impossible de charger le pilote JDBC", e);
        }
        try {
            if (!databaseExists()) {
                logger.info("üìÅ Cr√©ation de la base de donn√©es : " + DbPath);
            }
            conn = DriverManager.getConnection("jdbc:sqlite:" +  DbPath);

            if (conn == null) {
                throw new SQLException("Connexion JDBC retourn√©e null.");
            }
            logger.info("‚úÖ Connexion √©tablie avec la base de donn√©es.");
            if (!tablesExist()) {
                createTables();
                logger.info("‚úÖ Tables et triggers cr√©√©s avec succ√®s !");
            } else {
                logger.info("‚ÑπÔ∏è Les tables existent d√©j√†, aucune cr√©ation n√©cessaire.");
            }
        } catch (SQLException e) {
            logger.severe("‚ùå Erreur d'initialisation de la base de donn√©es : " + e.getMessage());
            throw new DatabaseInitializationException("√âchec de connexion √† la base de donn√©es", e);
        }
    }

    /**
     * V√©rifie si la base de donn√©es existe physiquement sur le disque.
     * @return true si le fichier existe, sinon false.
     */
    private boolean databaseExists() {
        File dbFile = new File(DbPath);
        return dbFile.exists();
    }

    /**
     * V√©rifie si au moins une table utilisateur existe dans la base.
     * @return true si une table est trouv√©e, sinon false.
     */
    private boolean tablesExist() {
        String sql = createSqlLoader.getQuery("tablesExist");

        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            return rs.next();
        } catch (SQLException e) {
            logger.info("‚ùå Erreur lors de la v√©rification des tables : " + e.getMessage());
            return false;
        }
    }

    /**
     * Cr√©e toutes les tables et triggers √† partir du fichier SQL.
     * @throws SQLException si une erreur se produit lors de l'ex√©cution SQL.
     */
    private void createTables() throws SQLException {
        String sql = createSqlLoader.getQuery("createAllTablesAndTriggers");

        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            logger.severe("‚ùå Erreur lors de la cr√©ation des tables : " + e.getMessage());
            throw e; // Re-throw SQLException
        }
    }

    /**
     * Fournit la connexion √† la base de donn√©es.
     * @return objet Connection actif.
     */
    public Connection getConnection() {
        return conn;
    }

    /**
     * Ferme proprement la connexion √† la base de donn√©es.
     */
    public void closeConnection() {
        if (conn != null) {
            try {
                conn.close();
                logger.info("üîí Connexion ferm√©e.");
            } catch (SQLException e) {
                logger.warning("‚ùå Erreur lors de la fermeture de la connexion : " + e.getMessage());
            }
        }
    }
}
